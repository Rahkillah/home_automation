// lib/main.dart
import 'package:flutter/material.dart';
import 'screens/home_page.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Smart Home App',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: HomePage(),
    );
  }
}

// lib/screens/home_page.dart
import 'package:flutter/material.dart';
import '../widgets/home_content.dart';
import 'control_page.dart';
import 'security_page.dart';
import '../widgets/bottom_nav_bar.dart';

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  int _currentIndex = 0;
  final List<Widget> _children = [
    HomeContent(),
    ControlPage(),
    SecurityPage(),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Smart Home')),
      body: _children[_currentIndex],
      bottomNavigationBar: BottomNavBar(
        currentIndex: _currentIndex,
        onTap: (index) => setState(() => _currentIndex = index),
      ),
    );
  }
}

// lib/screens/control_page.dart
import 'package:flutter/material.dart';
import '../services/esp32_service.dart';

class ControlPage extends StatefulWidget {
  const ControlPage({super.key});

  @override
  _ControlPageState createState() => _ControlPageState();
}

class _ControlPageState extends State<ControlPage> {
  final ESP32Service _esp32Service = ESP32Service();
  bool light1 = false;
  bool light2 = false;
  bool door = false;
  bool window = false;
  int acStatus = 0;

  Future<void> _sendCommand(String command, dynamic value) async {
    try {
      await _esp32Service.sendCommand(command, value);
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Commande envoyée avec succès')),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Erreur d\'envoi de la commande')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return ListView(
      padding: const EdgeInsets.all(16.0),
      children: [
        SwitchListTile(
          title: const Text('Lumière intérieure 1'),
          value: light1,
          onChanged: (bool value) {
            setState(() => light1 = value);
            _sendCommand('led1', value ? 1 : 0);
          },
        ),
        SwitchListTile(
          title: const Text('Lumière intérieure 2'),
          value: light2,
          onChanged: (bool value) {
            setState(() => light2 = value);
            _sendCommand('led2', value ? 1 : 0);
          },
        ),
        SwitchListTile(
          title: const Text('Porte'),
          value: door,
          onChanged: (bool value) {
            setState(() => door = value);
            _sendCommand('doorStatus', value);
          },
        ),
        SwitchListTile(
          title: const Text('Fenêtre'),
          value: window,
          onChanged: (bool value) {
            setState(() => window = value);
            _sendCommand('windowStatus', value);
          },
        ),
        ListTile(
          title: const Text('Climatisation'),
          trailing: DropdownButton<int>(
            value: acStatus,
            items: const [
              DropdownMenuItem(value: 0, child: Text('Arrêt')),
              DropdownMenuItem(value: 1, child: Text('Chauffage')),
              DropdownMenuItem(value: -1, child: Text('Refroidissement')),
            ],
            onChanged: (int? value) {
              setState(() => acStatus = value!);
              _sendCommand('acStatus', value);
            },
          ),
        ),
      ],
    );
  }
}

// lib/screens/security_page.dart
import 'package:flutter/material.dart';
import '../services/esp32_service.dart';

class SecurityPage extends StatefulWidget {
  const SecurityPage({super.key});

  @override
  _SecurityPageState createState() => _SecurityPageState();
}

class _SecurityPageState extends State<SecurityPage> {
  final ESP32Service _esp32Service = ESP32Service();
  bool intruderDetected = false;

  @override
  void initState() {
    super.initState();
    _fetchSecurityData();
  }

  Future<void> _fetchSecurityData() async {
    try {
      final data = await _esp32Service.fetchHomeData();
      setState(() => intruderDetected = data['intruStatus'] ?? false);
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Erreur de connexion au serveur')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return RefreshIndicator(
      onRefresh: _fetchSecurityData,
      child: ListView(
        padding: const EdgeInsets.all(16.0),
        children: [
          Card(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                children: [
                  const Text('Statut de sécurité',
                      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                  const SizedBox(height: 8),
                  Icon(
                    intruderDetected ? Icons.warning : Icons.security,
                    size: 48,
                    color: intruderDetected ? Colors.red : Colors.green,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    intruderDetected ? 'Intrusion détectée!' : 'Aucune intrusion',
                    style: TextStyle(
                        fontSize: 24,
                        color: intruderDetected ? Colors.red : Colors.green),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}

// lib/widgets/home_content.dart
import 'package:flutter/material.dart';
import 'info_card.dart';
import '../services/esp32_service.dart';

class HomeContent extends StatefulWidget {
  const HomeContent({super.key});

  @override
  _HomeContentState createState() => _HomeContentState();
}

class _HomeContentState extends State<HomeContent> {
  final ESP32Service _esp32Service = ESP32Service();
  Map<String, dynamic> homeData = {};

  @override
  void initState() {
    super.initState();
    _fetchData();
  }

  Future<void> _fetchData() async {
    try {
      final data = await _esp32Service.fetchHomeData();
      setState(() => homeData = data);
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Erreur de connexion au serveur')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return RefreshIndicator(
      onRefresh: _fetchData,
      child: ListView(
        padding: const EdgeInsets.all(16.0),
        children: [
          InfoCard('Température', '${homeData['temperature'] ?? '--'}°C'),
          InfoCard('Humidité', '${homeData['humidity'] ?? '--'}%'),
          InfoCard('Batterie', '${homeData['battLevel'] ?? '--'}%'),
          InfoCard('Luminosité', '${homeData['sunLevel'] ?? '--'}'),
          InfoCard('Pluie', homeData['rainLevel'] != null
              ? (homeData['rainLevel'] > 500 ? 'Oui' : 'Non')
              : '--'),
        ],
      ),
    );
  }
}

// lib/widgets/info_card.dart
import 'package:flutter/material.dart';

class InfoCard extends StatelessWidget {
  final String title;
  final String value;

  const InfoCard(this.title, this.value, {super.key});

  @override
  Widget build(BuildContext context) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Text(title,
                style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            const SizedBox(height: 8),
            Text(value, style: const TextStyle(fontSize: 24)),
          ],
        ),
      ),
    );
  }
}

// lib/widgets/bottom_nav_bar.dart
import 'package:flutter/material.dart';

class BottomNavBar extends StatelessWidget {
  final int currentIndex;
  final Function(int) onTap;

  const BottomNavBar({
    super.key,
    required this.currentIndex,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return BottomNavigationBar(
      onTap: onTap,
      currentIndex: currentIndex,
      items: const [
        BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Accueil'),
        BottomNavigationBarItem(
            icon: Icon(Icons.settings_remote), label: 'Contrôle'),
        BottomNavigationBarItem(
            icon: Icon(Icons.security), label: 'Sécurité'),
      ],
    );
  }
}

// lib/services/esp32_service.dart
import 'dart:convert';
import 'package:http/http.dart' as http;

class ESP32Service {
  static const String ESP32_IP = '192.168.88.238';

  Future<Map<String, dynamic>> fetchHomeData() async {
    final response = await http.get(Uri.parse('http://$ESP32_IP/datasend'));
    if (response.statusCode == 200) {
      return json.decode(response.body);
    } else {
      throw Exception('Échec de la récupération des données');
    }
  }

  Future<void> sendCommand(String command, dynamic value) async {
    final response = await http.post(
      Uri.parse('http://$ESP32_IP/datarecived'),
      headers: {'Content-Type': 'application/json'},
      body: json.encode({command: value}),
    );
    if (response.statusCode != 200) {
      throw Exception('Échec de l\'envoi de la commande');
    }
  }
}